def runStagingPipeline() {
    node {
        try {
            // Khai báo biến trực tiếp
            def NAMESPACE = "staging"
            def DOCKER_REGISTRY = 'csc11007'
            def APP_NAME = "petclinic-${NAMESPACE}"
            def GITOPS_REPO = "https://github.com/csc11007-assignments/spring-pet-clinic-microservices-configuration.git"
            def VALUES_FILE = "charts/staging/values.yaml"
            def COMMIT = env.TAG_NAME

            stage('Validate tag') {
                def GIT_TAG = env.TAG_NAME ?: error("No tag provided")
                echo "GIT_TAG: ${GIT_TAG}"
            }

            stage('Checkout source code repository') {
                steps {
                    script {
                        withCredentials([usernamePassword(  
                            credentialsId: 'github-token', 
                            usernameVariable: 'GIT_USERNAME', 
                            passwordVariable: 'GIT_PASSWORD'
                            )]) {
                            def GIT_TAG = params.tag_name?.trim()
                            checkout([$class: 'GitSCM', 
                                branches: [[name: "refs/tags/${GIT_TAG}"]], 
                                userRemoteConfigs: [[url: 'https://github.com/csc11007-assignments/spring-petclinic-microservice-ex2.git']]
                            ])
                        }
                    }
                }
            }

            stage('Build & Push docker images') {
                def serviceMap = [
                    'config-server': '8888',
                    'discovery-server': '8761',
                    'customers-service': '8081',
                    'visits-service': '8082',
                    'vets-service': '8083',
                    'genai-service': '8084',
                    'api-gateway': '8080',
                    'admin-server': '9090'
                ]

                docker.withRegistry('https://index.docker.io/v1/', 'csc11007') {
                    serviceMap.each { service, port ->
                        def imageName = "${DOCKER_REGISTRY}/spring-petclinic-${service}:${env.TAG_NAME}"
                        echo "Building Docker image for ${service} → ${imageName}"

                        sh """
                            docker build \
                              --build-arg SERVICE_NAME=${service} \
                              --build-arg EXPOSED_PORT=${port} \
                              -t ${imageName} .
                        """
                        sh "docker push ${imageName}"
                    }
                }
            }

            stage('Checkout GitOps configuration repository') {
                dir('gitops-repo') {
                    withCredentials([usernamePassword(
                        credentialsId: 'github-token',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh """
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/csc11007-assignments/spring-pet-clinic-microservices-configuration.git .
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins CI"
                        """
                    }
                }
            }

            stage('Update configuration with new image tags') {
                dir('gitops-repo') {
                    def tag = env.TAG_NAME
                    def services = [
                        'config-server',
                        'customers-service',
                        'discovery-server',
                        'visits-service',
                        'vets-service',
                        'genai-service',
                        'api-gateway',
                        'admin-server'
                    ]

                    services.each { svc ->
                        sh """
                            if grep -q "^[[:space:]]*${svc}:" ${VALUES_FILE}; then
                                lineNumber=\$(grep -n "^[[:space:]]*${svc}:" ${VALUES_FILE} | cut -d':' -f1)
                                if [ ! -z "\$lineNumber" ]; then
                                    tagLine=\$((lineNumber + 3))
                                    sed -i "\${tagLine}s/tag: .*/tag: ${tag}/" ${VALUES_FILE}
                                fi
                            fi
                        """
                    }

                    sh "cat ${VALUES_FILE}"
                }
            }

            stage('Commit and Push to GitOps Repository') {
                dir('gitops-repo') {
                    withCredentials([usernamePassword(
                        credentialsId: 'github-token',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh """
                            git add ${VALUES_FILE}
                            git commit -m "Update image tags for services to ${env.TAG_NAME}" || echo "No changes to commit"
                            git push origin main
                        """
                    }
                }
            }
        } catch (Exception e) {
            echo "Error in staging pipeline: ${e.message}"
            throw e
        } finally {
            cleanWs()
            echo "Staging pipeline completed"
        }
    }
}

return this