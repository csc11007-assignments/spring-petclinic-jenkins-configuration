def runStagingPipeline() {
    node {
        try {
            def NAMESPACE = "staging"
            def DOCKER_REGISTRY = 'csc11007'
            def APP_NAME = "petclinic-${NAMESPACE}"
            def GITOPS_REPO = "https://github.com/csc11007-assignments/spring-pet-clinic-microservices-configuration.git"
            def VALUES_FILE = "charts/staging/values.yaml"
            def GIT_TAG = params.tag_name?.trim() ?: env.TAG_NAME?.trim()
            def SERVICES_CHANGED = ""
            env.TAG = GIT_TAG ?: 'main'

            stage('Checkout Source Code Repository') {
                checkout([$class: 'GitSCM',
                    branches: [[name: GIT_TAG ? "refs/tags/${GIT_TAG}" : "refs/heads/main"]],
                    userRemoteConfigs: [[url: 'https://github.com/csc11007-assignments/spring-petclinic-microservice-ex2.git', credentialsId: 'github-token']],
                    extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0]]
                ])
            }

            stage('Validate Tag or Detect Changes') {
                script {
                    if (GIT_TAG) {
                        echo "Tag build detected: ${GIT_TAG}"
                        SERVICES_CHANGED = [
                            "spring-petclinic-config-server",
                            "spring-petclinic-discovery-server",
                            "spring-petclinic-customers-service",
                            "spring-petclinic-visits-service",
                            "spring-petclinic-vets-service",
                            "spring-petclinic-genai-service",
                            "spring-petclinic-api-gateway",
                            "spring-petclinic-admin-server"
                        ].join(',')
                    } else {
                        echo "No tag provided. Detecting changed services for main branch."
                        sh "git fetch origin main --prune --depth=2 || git fetch origin main --prune --unshallow"

                        def baseCommit
                        try {
                            baseCommit = sh(script: "git rev-parse HEAD~1", returnStdout: true).trim()
                        } catch (Exception e) {
                            echo "No previous commit found. Treating as first commit."
                            SERVICES_CHANGED = [
                                "spring-petclinic-config-server",
                                "spring-petclinic-discovery-server",
                                "spring-petclinic-customers-service",
                                "spring-petclinic-visits-service",
                                "spring-petclinic-vets-service",
                                "spring-petclinic-genai-service",
                                "spring-petclinic-api-gateway",
                                "spring-petclinic-admin-server"
                            ].join(',')
                        }

                        if (!SERVICES_CHANGED) {
                            def changes = sh(script: "git diff --name-only ${baseCommit} HEAD", returnStdout: true).trim()
                            echo "Raw changed files:\n${changes}"

                            def changedFiles = changes ? changes.split("\n") : []
                            def normalizedChanges = changedFiles.collect { file -> file.replaceFirst("^.*?/spring-petclinic-microservices/", "") }

                            def services = [
                                "spring-petclinic-admin-server",
                                "spring-petclinic-api-gateway",
                                "spring-petclinic-config-server",
                                "spring-petclinic-customers-service",
                                "spring-petclinic-discovery-server",
                                "spring-petclinic-genai-service",
                                "spring-petclinic-vets-service",
                                "spring-petclinic-visits-service"
                            ]

                            def changedServices = services.findAll { service ->
                                normalizedChanges.any { file -> file.startsWith("${service}/") || file.contains("${service}/") }
                            }

                            SERVICES_CHANGED = changedServices.join(',')
                            echo "Changed services: ${SERVICES_CHANGED}"
                        }

                        if (!SERVICES_CHANGED) {
                            echo "No services changed. Skipping build."
                            currentBuild.result = 'SUCCESS'
                            return
                        }
                    }
                }
            }

            stage('Build & Push Docker Images') {
                when { expression { SERVICES_CHANGED != "" } }
                script {
                    def servicesList = SERVICES_CHANGED.tokenize(',')
                    def serviceMap = [
                        'spring-petclinic-config-server': '8888',
                        'spring-petclinic-discovery-server': '8761',
                        'spring-petclinic-customers-service': '8081',
                        'spring-petclinic-visits-service': '8082',
                        'spring-petclinic-vets-service': '8083',
                        'spring-petclinic-genai-service': '8084',
                        'spring-petclinic-api-gateway': '8080',
                        'spring-petclinic-admin-server': '9090'
                    ]

                    docker.withRegistry('https://index.docker.io/v1/', 'csc11007') {
                        servicesList.each { service ->
                            def shortServiceName = service.replaceFirst("spring-petclinic-", "")
                            def port = serviceMap[service]
                            def imageName = "${DOCKER_REGISTRY}/spring-petclinic-${shortServiceName}:${env.TAG}"
                            echo "Building Docker image for ${shortServiceName} â†’ ${imageName}"

                            sh """
                                docker build \
                                  --build-arg SERVICE_NAME=${service} \
                                  --build-arg EXPOSED_PORT=${port} \
                                  -t ${imageName} .
                                docker push ${imageName}
                                docker rmi ${imageName} || true
                                docker system prune -f --volumes
                                docker builder prune -f
                            """
                        }
                    }
                }
            }

            stage('Checkout GitOps Configuration Repository') {
                when { expression { SERVICES_CHANGED != "" && GIT_TAG } }
                dir('gitops-repo') {
                    withCredentials([usernamePassword(
                        credentialsId: 'github-token',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh """
                            rm -rf ./*
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/csc11007-assignments/spring-pet-clinic-microservices-configuration.git .
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins CI"
                        """
                    }
                }
            }

            stage('Update Configuration with New Image Tags') {
                when { expression { SERVICES_CHANGED != "" && GIT_TAG } }
                dir('gitops-repo') {
                    script {
                        def servicesList = SERVICES_CHANGED.tokenize(',')

                        servicesList.each { service ->
                            def shortServiceName = service.replaceFirst("spring-petclinic-", "")
                            sh """
                                if grep -q "^[[:space:]]*${shortServiceName}:" ${VALUES_FILE}; then
                                    lineNumber=\$(grep -n "^[[:space:]]*${shortServiceName}:" ${VALUES_FILE} | cut -d':' -f1)
                                    if [ ! -z "\$lineNumber" ]; then
                                        tagLine=\$((lineNumber + 3))
                                        sed -i "\${tagLine}s/tag: .*/tag: ${env.TAG}/" ${VALUES_FILE}
                                    fi
                                fi
                            """
                        }

                        sh "cat ${VALUES_FILE}"
                    }
                }
            }

            stage('Commit and Push to GitOps Repository') {
                when { expression { SERVICES_CHANGED != "" && GIT_TAG } }
                dir('gitops-repo') {
                    withCredentials([usernamePassword(
                        credentialsId: 'github-token',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh """
                            git add ${VALUES_FILE}
                            git commit -m "Update image tags for services [${SERVICES_CHANGED}] to ${env.TAG} in ${VALUES_FILE}" || echo "No changes to commit"
                            git push origin main
                        """
                    }
                }
            }
        } catch (Exception e) {
            echo "Error in staging pipeline: ${e.message}"
            throw e
        } finally {
            cleanWs()
            echo "Staging pipeline completed"
        }
    }
}

return this