def runFeaturePipeline() {
    node {
        try {
            def NAMESPACE = "feature"
            def DOCKER_REGISTRY = 'csc11007'
            def APP_NAME = "petclinic-${NAMESPACE}"
            def SERVICES_CHANGED = ""

            stage('Checkout Source Code Repository') {
                checkout([$class: 'GitSCM',
                    branches: [[name: env.BRANCH_NAME]],
                    userRemoteConfigs: [[url: 'https://github.com/csc11007-assignments/spring-petclinic-microservice-ex2.git', credentialsId: 'github-token']]
                ])
            }

            stage('Detect Changed Services') {
                script {
                    sh "git fetch origin ${env.BRANCH_NAME} --prune --depth=2 || git fetch origin ${env.BRANCH_NAME} --prune --unshallow"

                    def baseCommit
                    try {
                        baseCommit = sh(script: "git rev-parse HEAD~1", returnStdout: true).trim()
                    } catch (Exception e) {
                        echo "No previous commit found. Treating as first commit."
                        SERVICES_CHANGED = [
                            "spring-petclinic-admin-server",
                            "spring-petclinic-api-gateway",
                            "spring-petclinic-config-server",
                            "spring-petclinic-customers-service",
                            "spring-petclinic-discovery-server",
                            "spring-petclinic-genai-service",
                            "spring-petclinic-vets-service",
                            "spring-petclinic-visits-service"
                        ].join(',')
                    }

                    if (!SERVICES_CHANGED) {
                        def changes = sh(script: "git diff --name-only ${baseCommit} HEAD", returnStdout: true).trim()
                        echo "Raw changed files:\n${changes}"

                        def changedFiles = changes ? changes.split("\n") : []
                        def normalizedChanges = changedFiles.collect { file -> file.replaceFirst("^.*?/spring-petclinic-microservices/", "") }

                        def services = [
                            "spring-petclinic-admin-server",
                            "spring-petclinic-api-gateway",
                            "spring-petclinic-config-server",
                            "spring-petclinic-customers-service",
                            "spring-petclinic-discovery-server",
                            "spring-petclinic-genai-service",
                            "spring-petclinic-vets-service",
                            "spring-petclinic-visits-service"
                        ]

                        def changedServices = services.findAll { service ->
                            normalizedChanges.any { file -> file.startsWith("${service}/") || file.contains("${service}/") }
                        }

                        SERVICES_CHANGED = changedServices.join(',')
                        echo "Changed services: ${SERVICES_CHANGED}"
                    }

                    if (!SERVICES_CHANGED) {
                        echo "No services changed. Skipping build."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }

            stage('Get Commit Hash and Branch Name') {
                env.COMMIT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                env.BRANCH_TAG = env.BRANCH_NAME.replaceAll("[^a-zA-Z0-9-]", "-").toLowerCase()
                env.TAG = "${env.BRANCH_TAG}-${env.COMMIT}"
                echo "Branch: ${env.BRANCH_NAME}, Commit: ${env.COMMIT}, Tag: ${env.TAG}"
            }

            stage('Build & Push Docker Images') {
                script {
                    def servicesList = SERVICES_CHANGED.tokenize(',')
                    def serviceMap = [
                        'spring-petclinic-config-server': '8888',
                        'spring-petclinic-discovery-server': '8761',
                        'spring-petclinic-customers-service': '8081',
                        'spring-petclinic-visits-service': '8082',
                        'spring-petclinic-vets-service': '8083',
                        'spring-petclinic-genai-service': '8084',
                        'spring-petclinic-api-gateway': '8080',
                        'spring-petclinic-admin-server': '9090'
                    ]

                    docker.withRegistry('https://index.docker.io/v1/', 'csc11007') {
                        servicesList.each { service ->
                            def shortServiceName = service.replaceFirst("spring-petclinic-", "")
                            def port = serviceMap[service]
                            def imageName = "${DOCKER_REGISTRY}/spring-petclinic-${shortServiceName}:${env.TAG}"
                            echo "Building Docker image for ${shortServiceName} â†’ ${imageName}"

                            sh """
                                docker build \
                                  --build-arg SERVICE_NAME=${service} \
                                  --build-arg EXPOSED_PORT=${port} \
                                  -t ${imageName} .
                                docker push ${imageName}
                                docker rmi ${imageName} || true
                                docker system prune -f --volumes
                                docker builder prune -f
                            """
                        }
                    }
                }
            }
        } catch (Exception e) {
            echo "Error in feature pipeline: ${e.message}"
            throw e
        } finally {
            cleanWs()
            echo "Feature pipeline completed"
        }
    }
}

return this